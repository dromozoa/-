<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>昭和横濱物語</title>

  <!-- https://fonts.google.com/ -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=BIZ+UDPMincho&display=swap" rel="stylesheet">

  <link href="demeter.css" rel="stylesheet">
  <link href="demeter-font.css" rel="stylesheet">

  <link href="manifest.webmanifest" rel="manifest">
  <link href="favicon.ico" rel="icon" sizes="any">
  <link href="favicon.svg" rel="icon" type="image/svg+xml">
  <link href="apple-touch-icon.png" rel="apple-touch-icon">

  <!-- https://lil-gui.georgealways.com/#Guide#Installation -->
  <script src="https://cdn.jsdelivr.net/npm/lil-gui@0.17.0/dist/lil-gui.umd.min.js" integrity="sha256-nxA4RilDJhj/0KWgoBtzApRa21VuGjjinTHof84MK/0=" crossorigin="anonymous"></script>

  <script defer src="demeter.js"></script>
  <script defer src="demeter-jlreq.js"></script>
</head>

<body style="margin: 0 0 0 24px">

<template>
$scenario
</template>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  let start;

  const D = globalThis.demeter;
  await D.boot();

  start = performance.now();
  const result = await D.loadFontFaces(10000);
  console.log("loadFontFaces", performance.now() - start, result);

  const fontSize = 24;
  const font = "'Showa Yokohama Story', 'BIZ UDPMincho'";

  const outputNode = document.body.appendChild(document.createElement("div"));
  outputNode.style.height = D.numberToCssPixels(document.documentElement.clientHeight);
  outputNode.style.font = D.numberToCssPixels(fontSize) + " " + font;
  outputNode.style.overflow = "auto";
  outputNode.style.scrollSnapType = "y mandatory";

  window.addEventListener("resize", () => {
    outputNode.style.height = D.numberToCssPixels(document.documentElement.clientHeight);
  });

  const speakerTable = {
    narrator: "\uE000",
    alice:    "アリス",
    danu:     "ダヌー",
    demeter:  "デメテル",
    yukio:    "ユキヲ",
    priest:   "神父",
    engineer: "課長",
    activist: "店主",
    steven:   "STEVEN",
  };

  const GUI = lil.GUI;
  const gui = new GUI;

  const data = {
    lineLength: 24,
    layout: async () => await layout(data.lineLength),
  };

  gui.add(data, "lineLength", 10, 40, 1).name("一行の文字数");
  const layoutController = gui.add(data, "layout").name("レイアウト");

  const layout = async lineLength => {
    layoutController.name("レイアウト中").disable();
    const start = performance.now();

    outputNode.replaceChildren();

    const maxWidth = fontSize * lineLength;
    const maxLines = Math.max(Math.ceil(96 / lineLength), 4);
    const lineHeight = fontSize * 2;

    const sourceNodes = document.querySelector("template").content.children;
    for (let i = 0; i < sourceNodes.length; ++i) {
      await D.requestAnimationFrame();

      const sourceNode = sourceNodes[i];

      const containerNode = document.createElement("div");
      containerNode.style.display = "flex";
      containerNode.style.lineHeight = D.numberToCssPixels(lineHeight);
      containerNode.style.scrollSnapAlign = "start";

      const speakerNode = containerNode.appendChild(document.createElement("div"));
      speakerNode.textContent = speakerTable[sourceNode.dataset.speaker];
      speakerNode.style.flex = "none";
      speakerNode.style.width = D.numberToCssPixels(fontSize * 5);
      speakerNode.style.fontFamily = "'Showa Yokohama Story', 'BIZ UDPMincho'";

      const paragraphNode = containerNode.appendChild(document.createElement("div"));
      paragraphNode.style.flex = "none";
      paragraphNode.style.minHeight = D.numberToCssPixels(maxLines * lineHeight);
      paragraphNode.dataset.pid = sourceNode.dataset.pid;

      const paragraph = D.parseParagraph(sourceNode, fontSize, font);

      let numLines = 0;
      paragraph.map((text, j) => {
        const lines = D.composeText(text, maxWidth);
        numLines += lines.length;
        const textNode = paragraphNode.appendChild(D.layoutText(lines, fontSize, lineHeight));
        textNode.dataset.tid = sourceNode.children[j].dataset.tid;
      });

      if (numLines > maxLines) {
        paragraphNode.style.backgroundColor = "#FCC";
      }

      outputNode.append(containerNode);
    }

    console.log("layout", performance.now() - start);
    layoutController.name("レイアウト").enable();
  };

  await layout(24);
});
</script>

</body>
</html>
